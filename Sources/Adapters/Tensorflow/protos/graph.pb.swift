/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: graph.proto
 *
 */

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _1: SwiftProtobuf.ProtobufAPIVersion_1 {}
  typealias Version = _1
}

/// Represents the graph of operations
public struct Tensorflow_GraphDef: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".GraphDef"

  public var node: [Tensorflow_NodeDef] {
    get {return _storage._node}
    set {_uniqueStorage()._node = newValue}
  }

  /// Compatibility versions of the graph.  See core/public/version.h for version
  /// history.  The GraphDef version is distinct from the TensorFlow version, and
  /// each release of TensorFlow will support a range of GraphDef versions.
  public var versions: Tensorflow_VersionDef {
    get {return _storage._versions ?? Tensorflow_VersionDef()}
    set {_uniqueStorage()._versions = newValue}
  }
  /// Returns true if `versions` has been explicitly set.
  public var hasVersions: Bool {return _storage._versions != nil}
  /// Clears the value of `versions`. Subsequent reads from it will return its default value.
  public mutating func clearVersions() {_storage._versions = nil}

  /// Deprecated single version field; use versions above instead.  Since all
  /// GraphDef changes before "versions" was introduced were forward
  /// compatible, this field is entirely ignored.
  public var version: Int32 {
    get {return _storage._version}
    set {_uniqueStorage()._version = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeRepeatedMessageField(value: &_storage._node)
        case 3: try decoder.decodeSingularInt32Field(value: &_storage._version)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._versions)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._node.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._node, fieldNumber: 1)
      }
      if _storage._version != 0 {
        try visitor.visitSingularInt32Field(value: _storage._version, fieldNumber: 3)
      }
      if let v = _storage._versions {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "tensorflow"

extension Tensorflow_GraphDef: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "node"),
    4: .same(proto: "versions"),
    3: .same(proto: "version"),
  ]

  fileprivate class _StorageClass {
    var _node: [Tensorflow_NodeDef] = []
    var _versions: Tensorflow_VersionDef? = nil
    var _version: Int32 = 0

    init() {}

    init(copying source: _StorageClass) {
      _node = source._node
      _versions = source._versions
      _version = source._version
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Tensorflow_GraphDef) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._node != other_storage._node {return false}
        if _storage._versions != other_storage._versions {return false}
        if _storage._version != other_storage._version {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
