/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: resource_handle.proto
 *
 */

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _1: SwiftProtobuf.ProtobufAPIVersion_1 {}
  typealias Version = _1
}

/// Protocol buffer representing a handle to a tensorflow resource. Handles are
/// not valid across executions, but can be serialized back and forth from within
/// a single run.
struct Tensorflow_ResourceHandle: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".ResourceHandle"

  /// Unique name for the device containing the resource.
  var device: String = String()

  /// Container in which this resource is placed.
  var container: String = String()

  /// Unique name of this resource.
  var name: String = String()

  /// Hash code for the type of the resource. Is only valid in the same device
  /// and in the same execution.
  var hashCode: UInt64 = 0

  /// For debug-only, the name of the type pointed to by this handle, if
  /// available.
  var maybeTypeName: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.device)
      case 2: try decoder.decodeSingularStringField(value: &self.container)
      case 3: try decoder.decodeSingularStringField(value: &self.name)
      case 4: try decoder.decodeSingularUInt64Field(value: &self.hashCode)
      case 5: try decoder.decodeSingularStringField(value: &self.maybeTypeName)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.device.isEmpty {
      try visitor.visitSingularStringField(value: self.device, fieldNumber: 1)
    }
    if !self.container.isEmpty {
      try visitor.visitSingularStringField(value: self.container, fieldNumber: 2)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 3)
    }
    if self.hashCode != 0 {
      try visitor.visitSingularUInt64Field(value: self.hashCode, fieldNumber: 4)
    }
    if !self.maybeTypeName.isEmpty {
      try visitor.visitSingularStringField(value: self.maybeTypeName, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "tensorflow"

extension Tensorflow_ResourceHandle: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "device"),
    2: .same(proto: "container"),
    3: .same(proto: "name"),
    4: .standard(proto: "hash_code"),
    5: .standard(proto: "maybe_type_name"),
  ]

  func _protobuf_generated_isEqualTo(other: Tensorflow_ResourceHandle) -> Bool {
    if self.device != other.device {return false}
    if self.container != other.container {return false}
    if self.name != other.name {return false}
    if self.hashCode != other.hashCode {return false}
    if self.maybeTypeName != other.maybeTypeName {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
